// ModelSweeperUI.java
//
//  Part of DAVE-ML utility suite, written by Bruce Jackson, originally of NASA LaRC, now at
//  Adaptive Aerospace Group, Inc. <bjackson@adaptiveaero.com>
//
//  Visit <http://daveml.org> for more info.
//  Latest version can be downloaded from http://github.com/bjax/DAVEtools
//
//  Original version of DAVEtools, prior to version 0.9.8: Copyright (c) 2007 United States
//  Government as represented by LAR-17460-1. No copyright is claimed in the United States under
//  Title 17, U.S. Code. All Other Rights Reserved.
//
//  Copyright (c) 2017 Adaptive Aerospace Group,
//
//  Created on Sep 17, 2010, 10:40:34 AM

package gov.nasa.daveml.sweeper;

import org.math.plot.Plot3DPanel;
import org.math.plot.render.Projection;
import javax.swing.JTable;
import java.util.Iterator;
import javax.swing.JTextField;
import gov.nasa.daveml.dave.DAVE;
import gov.nasa.daveml.dave.DAVEException;
import gov.nasa.daveml.dave.Model;
import gov.nasa.daveml.dave.VectorInfo;
import gov.nasa.daveml.dave.VectorInfoArrayList;
import java.io.File;
import java.io.IOException;
import java.util.ListIterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import static org.math.array.DoubleArray.*;



class DMLFilter extends javax.swing.filechooser.FileFilter {
    @Override
    public boolean accept(File file) {
        // Allow only directories, or files with ".xml" or ".dml" extensions
        return file.isDirectory()
                || file.getAbsolutePath().endsWith(".xml")
                || file.getAbsolutePath().endsWith(".dml");
    }
    @Override
    public String getDescription() {
        // This description will be displayed in the dialog,
        // hard-coded is ugly, should be done vi I18N
        return "DAVE-ML documents (*.xml, *.dml)";
    }
}
/**
 *
 * Model Sweeper user interface class (includes main() function)
 * @author Bruce Jackson, AAG, 
 * <a href="mailto:bjackson@adaptiveaero.com">bjackson@adaptiveaero.com</a>
 *
 */
public class ModelSweeperUI extends javax.swing.JFrame {


    /**
     * Serialization unique ID
     */

    private static final long serialVersionUID = -42L;

    File inputFile;
    VectorInfoArrayList inputVec;
    VectorInfoArrayList outputVec;
    Model model;
    boolean plotReady;

    int numPts;

    int input1Selector;
    int input2Selector;
    int outputSelector;
    InputTable inputTable;
    InputTableJFrame inputTableJFrame;
    Plot3DPanel plot;
    int plotSurface;
    Projection projection;

    /** Creates new form ModelSweeperUI */
    public ModelSweeperUI() {
        inputFile = null;
        inputTable = null;
        inputVec = null;
        outputVec = null;
        model = null;
        numPts = 10;
        plotReady = false;
        plot = null;
        inputTableJFrame = null;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        inputSignals = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        input1ComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        input1MinValTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        input1MaxValTextField = new javax.swing.JTextField();
        input2ComboBox = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        input2MinValTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        input2MaxValTextField = new javax.swing.JTextField();
        jSeparator5 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        modelFileNameTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        Coarser = new javax.swing.JButton();
        Denser = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        plotFrame = new javax.swing.JInternalFrame();
        outputSignalComboBox = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Model Inputs"));

        inputSignals.setText("Inputs Table");
        inputSignals.setEnabled(false);
        inputSignals.setMaximumSize(new java.awt.Dimension(110, 29));
        inputSignals.setMinimumSize(new java.awt.Dimension(110, 29));
        inputSignals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputSignalsActionPerformed(evt);
            }
        });

        input1ComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Input 1", "Input 2", "Input 3", "Input 4" }));
        input1ComboBox.setEnabled(false);
        input1ComboBox.setPreferredSize(new java.awt.Dimension(260, 27));
        input1ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input1ComboBoxActionPerformed(evt);
            }
        });

        jLabel2.setText("from");

        input1MinValTextField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        input1MinValTextField.setText("0.0");
        input1MinValTextField.setEnabled(false);
        input1MinValTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input1MinValTextFieldActionPerformed(evt);
            }
        });
        input1MinValTextField.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                input1MinValTextFieldInputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });

        jLabel3.setText("to");

        input1MaxValTextField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        input1MaxValTextField.setText("0.0");
        input1MaxValTextField.setEnabled(false);
        input1MaxValTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input1MaxValTextFieldActionPerformed(evt);
            }
        });

        input2ComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Input 2", "Input 3", "Input 4", " " }));
        input2ComboBox.setEnabled(false);
        input2ComboBox.setPreferredSize(new java.awt.Dimension(260, 27));
        input2ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input2ComboBoxActionPerformed(evt);
            }
        });

        jLabel7.setText("from");

        input2MinValTextField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        input2MinValTextField.setText("0.0");
        input2MinValTextField.setEnabled(false);
        input2MinValTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input2MinValTextFieldActionPerformed(evt);
            }
        });

        jLabel8.setText("to");

        input2MaxValTextField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        input2MaxValTextField.setText("0.0");
        input2MaxValTextField.setEnabled(false);
        input2MaxValTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input2MaxValTextFieldActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(8, 8, 8)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                            .add(input1ComboBox, 0, 242, Short.MAX_VALUE)
                            .add(input2ComboBox, 0, 242, Short.MAX_VALUE)
                            .add(jSeparator4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                            .add(jSeparator5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)))
                    .add(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel2)
                            .add(jLabel7))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(input1MinValTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(input2MinValTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel3)
                            .add(jLabel8))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(input1MaxValTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(input2MaxValTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 69, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(inputSignals, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 250, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel3Layout.linkSize(new java.awt.Component[] {input1MaxValTextField, input1MinValTextField, input2MaxValTextField, input2MinValTextField}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(inputSignals, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(3, 3, 3)
                .add(jSeparator4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(input1ComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(input1MinValTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel3)
                    .add(input1MaxValTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(5, 5, 5)
                .add(jSeparator5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(input2ComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(input2MinValTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel8)
                    .add(input2MaxValTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel7))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Model"));

        modelFileNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modelFileNameTextFieldActionPerformed(evt);
            }
        });

        browseButton.setText("Browse...");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(modelFileNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 199, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(browseButton))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(modelFileNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(browseButton))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Mesh Density"));

        Coarser.setText("Halve");
        Coarser.setEnabled(false);
        Coarser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CoarserActionPerformed(evt);
            }
        });

        Denser.setText("Double");
        Denser.setEnabled(false);
        Denser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DenserActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(Denser)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 9, Short.MAX_VALUE)
                .add(Coarser, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 107, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2Layout.linkSize(new java.awt.Component[] {Coarser, Denser}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(Denser)
                    .add(Coarser))
                .addContainerGap(9, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Model Output"));

        plotFrame.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        plotFrame.setPreferredSize(new java.awt.Dimension(700, 553));
        plotFrame.setVisible(true);

        org.jdesktop.layout.GroupLayout plotFrameLayout = new org.jdesktop.layout.GroupLayout(plotFrame.getContentPane());
        plotFrame.getContentPane().setLayout(plotFrameLayout);
        plotFrameLayout.setHorizontalGroup(
            plotFrameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 817, Short.MAX_VALUE)
        );
        plotFrameLayout.setVerticalGroup(
            plotFrameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 678, Short.MAX_VALUE)
        );

        outputSignalComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Output 1", "Output 2", "Output 3", "Output 4" }));
        outputSignalComboBox.setEnabled(false);
        outputSignalComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputSignalComboBoxActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(plotFrame, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 821, Short.MAX_VALUE)
                    .add(outputSignalComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 393, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(outputSignalComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(plotFrame, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 682, Short.MAX_VALUE)
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE))
                .add(18, 18, 18)
                .add(jPanel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 66, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void input1MinValTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_input1MinValTextFieldActionPerformed
        Double val = new Double (input1MinValTextField.getText());
        inputTable.setMinVal(input1Selector, val);
        System.out.println("input1MinValTextFieldActionPerformed event");
        if (plotReady) doPlot();
    }//GEN-LAST:event_input1MinValTextFieldActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        final JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new DMLFilter());
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            inputFile = fc.getSelectedFile();
            plotReady = false;
            this.loadModel();
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void modelFileNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modelFileNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_modelFileNameTextFieldActionPerformed

    private void outputSignalComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputSignalComboBoxActionPerformed
        outputSelector = outputSignalComboBox.getSelectedIndex();
        if (plotReady) doPlot();
    }//GEN-LAST:event_outputSignalComboBoxActionPerformed

    private void input1ComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_input1ComboBoxActionPerformed
        int sel = input1ComboBox.getSelectedIndex();
        if ((sel > -1) && (sel != input2Selector)) {
            input1Selector = sel;
            setMinMaxLabels( input1MinValTextField, input1MaxValTextField, input1Selector);
            if (plotReady) doPlot();
        }
    }//GEN-LAST:event_input1ComboBoxActionPerformed

    private void input2ComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_input2ComboBoxActionPerformed
        int sel = input2ComboBox.getSelectedIndex();
        if ((sel > -1) && (sel != input1Selector)) {
            input2Selector = sel;
            setMinMaxLabels( input2MinValTextField, input2MaxValTextField, input2Selector);
            if (plotReady) doPlot();
        }
    }//GEN-LAST:event_input2ComboBoxActionPerformed

    private void input1MaxValTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_input1MaxValTextFieldActionPerformed
        Double val = new Double (input1MaxValTextField.getText());
        inputTable.setMaxVal(input1Selector, val);
        if (plotReady) doPlot();
    }//GEN-LAST:event_input1MaxValTextFieldActionPerformed

    private void input2MinValTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_input2MinValTextFieldActionPerformed
        Double val = new Double (input2MinValTextField.getText());
        inputTable.setMinVal(input2Selector, val);
        if (plotReady) doPlot();
    }//GEN-LAST:event_input2MinValTextFieldActionPerformed

    private void input2MaxValTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_input2MaxValTextFieldActionPerformed
        Double val = new Double (input2MaxValTextField.getText());
        inputTable.setMaxVal(input2Selector, val);
        if (plotReady) doPlot();
    }//GEN-LAST:event_input2MaxValTextFieldActionPerformed

    private void DenserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DenserActionPerformed
        numPts = 2*numPts;
        if (plotReady) doPlot();
    }//GEN-LAST:event_DenserActionPerformed

    private void CoarserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CoarserActionPerformed
        numPts = numPts/2;
        if (numPts < 2)
            numPts = 2;
        if (plotReady) doPlot();
    }//GEN-LAST:event_CoarserActionPerformed

    private void inputSignalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputSignalsActionPerformed
        if (inputTable != null) {
            if (inputTableJFrame == null) {
                inputTableJFrame = new InputTableJFrame();
            }
            if (inputTableJFrame != null) {
                JTable theTable = inputTableJFrame.getTable();
                theTable.setModel( inputTable );
                inputTable.setJFrame( inputTableJFrame );
                inputTableJFrame.setVisible(true);
            }
        }
    }//GEN-LAST:event_inputSignalsActionPerformed

    private void input1MinValTextFieldInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_input1MinValTextFieldInputMethodTextChanged
//        input1MaxValTextFieldActionPerformed(evt);
        System.out.println("Input1MinValTextFieldInputMethodTextChanged event");
    }//GEN-LAST:event_input1MinValTextFieldInputMethodTextChanged

    private void doPlot() {
        // define data ranges
        double xmin = inputTable.getMinVal(input1Selector);
        double xmax = inputTable.getMaxVal(input1Selector);
        double delx = (xmax-xmin)/numPts;

        double ymin = inputTable.getMinVal(input2Selector);
        double ymax = inputTable.getMaxVal(input2Selector);
        double dely = (ymax-ymin)/numPts;

        double[] x = {xmin, xmax};
        if (delx > 0) {
            x = increment(xmin, delx, xmax);
        }
        double[] y = {ymin, ymax};
        if (dely > 0) {
            y = increment(ymin, dely, ymax);
        }

        // run model at each intersection
        double[][] z = sweepModel(x, y, input1Selector, input2Selector,
                                    outputSelector, inputTable, model);

        // create or update plot
        if (plot == null) { // generate a new plot
            plot = new Plot3DPanel("NORTH");
            plot.setPlotToolBarOrientation("SOUTH");
            
            // put the PlotPanel in a JFrame like a JPanel
            plotFrame.setContentPane(plot);

        } else { // reuse plot
            plot.removePlot(plotSurface);
        }
        plot.setAxisLabel(0,(String) input1ComboBox.getItemAt(input1Selector));
        plot.setAxisLabel(1,(String) input2ComboBox.getItemAt(input2Selector));
        plot.setAxisLabel(2,(String) outputSignalComboBox.getItemAt(outputSelector));

        // add grid plot to the PlotPanel
        plotSurface = plot.addGridPlot(outputVec.get(outputSelector).getName(), x, y, z);


        plotReady = true;

    }

    private void loadModel() {
        inputVec = null;
        outputVec = null;

        DAVE dave = new DAVE();
        
        dave.setInputFileName(inputFile.getAbsolutePath());
        boolean keepGoing = true;
        try {
            keepGoing = dave.parseFile();
        } catch (IOException ex) {
            Logger.getLogger(ModelSweeperUI.class.getName()).log(Level.SEVERE, null, ex);
            keepGoing = false;
        }
        // verify model loaded properly - matches checkcases
        keepGoing = dave.verify();
        
        if (keepGoing) {
            model = dave.getModel();
            modelFileNameTextField.setText(model.getName());
            try {
                inputVec  = model.getInputVector();
                outputVec = model.getOutputVector();

                keepGoing = true;
                if (inputVec == null) {
                    keepGoing = false;
                } else if (inputVec.isEmpty()) {
                    keepGoing = false;
                }
                
                if (outputVec == null) {
                    keepGoing = false;
                } else if (outputVec.isEmpty()) {
                    keepGoing = false;
                }

            } catch (DAVEException ex) {
                Logger.getLogger(ModelSweeperUI.class.getName()).log(Level.SEVERE, null, ex);
                keepGoing = false;
            }
        }
        if (keepGoing) {

            inputTable = new InputTable( dave, this );

            // load signal list combo boxes
            clearAndLoadComboBox( input1ComboBox, inputVec );
            clearAndLoadComboBox( input2ComboBox, inputVec );
            clearAndLoadComboBox( outputSignalComboBox, outputVec );

            input1Selector = 0;
            input2Selector = 1;
            outputSelector = 0;

            input1ComboBox.setSelectedIndex(input1Selector);
            input2ComboBox.setSelectedIndex(input2Selector);
            outputSignalComboBox.setSelectedIndex(outputSelector);

            setMinMaxLabels( input1MinValTextField, input1MaxValTextField, input1Selector);
            setMinMaxLabels( input2MinValTextField, input2MaxValTextField, input2Selector);
 
        }
        if (!keepGoing) {
            System.exit(0);
        }
        plotReady = true;
        enableControls();
        doPlot();
    }

    /**
     * Enable screen controls since a model is now loaded and inputs are available
     */

    private void enableControls() {
        input1ComboBox.setEnabled(true);
        input2ComboBox.setEnabled(true);
        inputSignals.setEnabled(true);
        input1MinValTextField.setEnabled(true);
        input2MinValTextField.setEnabled(true);
        input1MaxValTextField.setEnabled(true);
        input2MaxValTextField.setEnabled(true);
        outputSignalComboBox.setEnabled(true);
        Coarser.setEnabled(true);
        Denser.setEnabled(true);
    }

    /**
     * Update the displayed values for input min and max sweep values
     * @param minField the <tt>JTextField</tt> displaying the minimum value
     * @param maxField the <tt>JTextField</tt> displaying the maximum value
     * @param inSel input signal selector (0-based)
     */

    private void setMinMaxLabels( JTextField minField,
                                  JTextField maxField,
                                  int inSel ) {
        Double val;
        val = new Double(inputTable.getMinVal(inSel));
        minField.setText(val.toString());
        val = new Double(inputTable.getMaxVal(inSel));
        maxField.setText(val.toString());

    }


    private void clearAndLoadComboBox( javax.swing.JComboBox comboBox,
                                        VectorInfoArrayList vec ) {
        // clear out current list if any
        for (int i=comboBox.getItemCount()-1;i>=0;i--) {
            comboBox.removeItemAt(i);
        }

        // add in elements of array
        ListIterator it = vec.listIterator();
        int index = 0;
        while (it.hasNext()) {
            VectorInfo signal = (VectorInfo) it.next();
            String name = signal.getName();
            String units = signal.getUnits();
            if (units.length() > 0) {
                name = name + "_" + units;
            }
//            System.out.println("Adding '" + name + "' at index " + index);
            comboBox.insertItemAt(name, index);
            index++;
        }

        comboBox.setSelectedIndex(0);
        comboBox.setMaximumRowCount(index);

     }

    private static void dumpVec( VectorInfoArrayList vec ) {
        System.out.println("Vector contains ");
        Iterator it = vec.iterator();
        while (it.hasNext()) {
            VectorInfo vi = (VectorInfo) it.next();
            System.out.println("   " + vi.getName() + " = " + vi.getValue());
        }
    }

    /**
     * Method to alert us an inputTable entry has changed
     */

    void updateInputInfo(int rowIndex) {
        if (rowIndex == input1Selector) {
            setMinMaxLabels( input1MinValTextField, input1MaxValTextField, rowIndex);
        }
        if (rowIndex == input2Selector) {
            setMinMaxLabels( input2MinValTextField, input2MaxValTextField, rowIndex);
        }
    }


        // function definition
    /**
     * Inner static method to generate dependent scalar output (function) value for two independent input scalars.
     * @param x input number 1 value
     * @param y input number 2 value
     * @param input1Selector offset into model's input vector for input number 1
     * @param input2Selector offset into model's input vector for input number 2
     * @param outputSelector offset into model's output vector for parameter being plotted
     * @param inputTable table of input values
     * @param model the DAVE-ML encoded model being swept
     * @return scalar resulting model output for given scalar inputs
     */
    public static double sweepModel(double x, double y,
                int input1Selector, int input2Selector,
                int outputSelector,
                InputTable inputTable, Model model) {

            VectorInfoArrayList inputVec = null;
            VectorInfoArrayList outputVec = null;

            // retrieve input, output vectors
            try {
                inputVec = model.getInputVector();
                outputVec = model.getOutputVector();

            } catch (DAVEException ex) {
                Logger.getLogger(ModelSweeperUI.class.getName()).log(Level.SEVERE, null, ex);
                System.exit(0);
            }

            // set default input vector at nominal inputs
            inputTable.loadNominalValues( inputVec );

            // assign values to two inputs
            VectorInfo input1 = inputVec.get(input1Selector);
            VectorInfo input2 = inputVec.get(input2Selector);

            input1.setValue(x);
            input2.setValue(y);

            inputVec.set(input1Selector, input1);
            inputVec.set(input2Selector, input2);

//            dumpVec( inputVec ); // debugging

            try {
                // call function
                model.cycle();
            } catch (DAVEException ex) {
                Logger.getLogger(ModelSweeperUI.class.getName()).log(Level.SEVERE, null, ex);
                System.exit(0);
            }

            // retrieve selected output value
            VectorInfo output = outputVec.get(outputSelector);

            return output.getValue();
        }

        // grid version of the function
    /**
     * Outer vector method for sweeping model function
     * @param x vector of independent input values for input 1
     * @param y vector of independent input values for input 2
     * @param input1Selector offset into model's input vector for input number 1
     * @param input2Selector offset into model's input vector for input number 2
     * @param outputSelector offset into model's output vector for parameter being plotted
     * @param inputTable table of input values
     * @param model the DAVE-ML encoded model being swept
     * @return two-D table of output values for grid of input vectors x and y
     */
    public static double[][] sweepModel(double[] x, double[] y,
                int input1Selector, int input2Selector,
                int outputSelector,
                InputTable inputTable, Model model) {
            double[][] z = new double[y.length][x.length];
            for (int i = 0; i < x.length; i++)
                    for (int j = 0; j < y.length; j++)
                            z[j][i] = sweepModel(x[i], y[j],
                                    input1Selector, input2Selector,
                                    outputSelector, inputTable, model);
            return z;
        }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ModelSweeperUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Coarser;
    private javax.swing.JButton Denser;
    private javax.swing.JButton browseButton;
    private javax.swing.JComboBox input1ComboBox;
    private javax.swing.JTextField input1MaxValTextField;
    private javax.swing.JTextField input1MinValTextField;
    private javax.swing.JComboBox input2ComboBox;
    private javax.swing.JTextField input2MaxValTextField;
    private javax.swing.JTextField input2MinValTextField;
    private javax.swing.JButton inputSignals;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JTextField modelFileNameTextField;
    private javax.swing.JComboBox outputSignalComboBox;
    private javax.swing.JInternalFrame plotFrame;
    // End of variables declaration//GEN-END:variables


}
